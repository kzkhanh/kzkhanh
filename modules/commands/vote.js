const request = require("request");
const fs = require("fs-extra");

module.exports.config = {
  name: "vote",
  version: "1.4.2",
  hasPermission: 0,
  credits: "Kz Kh√°nhh",
  description: "T·∫°o cu·ªôc b√¨nh ch·ªçn v·ªõi nhi·ªÅu l·ª±a ch·ªçn",
  commandCategory: "Gi·∫£i tr√≠",
  usages: "vote <n·ªôi dung b√¨nh ch·ªçn> | <l·ª±a ch·ªçn 1> | <l·ª±a ch·ªçn 2> | ...",
  cooldowns: 3,
  dependencies: {
    "request": "",
    "fs-extra": ""
  }
};

module.exports.run = async ({ api, event, args }) => {
  const options = args.join("").split("|").map((option) => option.trim());
  const content = options[0]; // N·ªôi dung c·ªßa cu·ªôc b√¨nh ch·ªçn

  if (options.length <= 2) { // N·∫øu ch·ªâ c√≥ √≠t h∆°n 2 l·ª±a ch·ªçn
    return api.sendMessage("Ph·∫£i c√≥ √≠t nh·∫•t 2 l·ª±a ch·ªçn ƒë·ªÉ b√¨nh ch·ªçn!", event.threadID);
  }
  if (options.length > 11) { // S·ªë l∆∞·ª£ng l·ª±a ch·ªçn t·ªëi ƒëa l√† 10
    return api.sendMessage("Kh√¥ng th·ªÉ b√¨nh ch·ªçn qu√° 10 l·ª±a ch·ªçn!", event.threadID);
  }

  const voteOptions = options.slice(1); // C√°c l·ª±a ch·ªçn

  let voteMessage = `üìä B·∫¶U CH·ªåN üìä\n\n${content}\n\n`; // N·ªôi dung tin nh·∫Øn b√¨nh ch·ªçn

  voteOptions.forEach((option, i) => {
    voteMessage += `${i + 1}Ô∏è‚É£ ${option}\n`; // Th√™m n·ªôi dung l·ª±a ch·ªçn v√†o tin nh·∫Øn b√¨nh ch·ªçn
  });

 // voteMessage += `\nƒê·ªÉ b√¨nh ch·ªçn, h√£y reply s·ªë th·ª© t·ª± t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn! Cu·ªôc b√¨nh ch·ªçn s·∫Ω k·∫øt th√∫c khi ng∆∞·ªùi t·∫°o b√¨nh ch·ªçn reply "END".`;

  const voteMsgInfo = await api.sendMessage(voteMessage, event.threadID); // G·ª≠i tin nh·∫Øn b√¨nh ch·ªçn

  let votingEnded = false; // Bi·∫øn ki·ªÉm tra cu·ªôc b√¨nh ch·ªçn ƒë√£ k·∫øt th√∫c ch∆∞a
  let voteData = {}; // Danh s√°ch k·∫øt qu·∫£ b√¨nh ch·ªçn

  const handleVote = async ({ event, api }) => {
    if (!votingEnded && event.type === "message_reply" && event.messageReply.messageID === voteMsgInfo.messageID) {
      // N·∫øu ƒë√≥ l√† ph·∫£n h·ªìi reply c·ªßa cu·ªôc b√¨nh ch·ªçn ƒëang di·ªÖn ra
      const voteIndex = Number.parseInt(event.body.trim()); // L·∫•y s·ªë th·ª© t·ª± l·ª±a ch·ªçn ƒë∆∞·ª£c ng∆∞·ªùi d√πng b√¨nh ch·ªçn
      if (!isNaN(voteIndex) && voteIndex >= 1 && voteIndex <= voteOptions.length) { // Ki·ªÉm tra xem ƒë√≥ c√≥ ph·∫£i l√† s·ªë th·ª© t·ª± h·ª£p l·ªá hay kh√¥ng
        const voteOptionIndex = voteIndex - 1; // L·∫•y s·ªë th·ª© t·ª± c·ªßa l·ª±a ch·ªçn t·ª´ s·ªë th·ª© t·ª± b√¨nh ch·ªçn
        if (!voteData[event.senderID]) {
          voteData[event.senderID] = voteOptionIndex; // L∆∞u l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng v√†o danh s√°ch k·∫øt qu·∫£ b√¨nh ch·ªçn
          api.sendMessage(`B·∫°n ƒë√£ b√¨nh ch·ªçn cho "${voteOptions[voteOptionIndex]}"!`, event.threadID); // Th√¥ng b√°o cho ng∆∞·ªùi d√πng bi·∫øt b√¨nh ch·ªçn c·ªßa h·ªç ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n

          // G·ª≠i th√¥ng b√°o v·ªÅ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng cho ng∆∞·ªùi t·∫°o b√¨nh ch·ªçn v√† ADMIN
          const user = await api.getUserInfo(event.senderID);
          const userName = user[event.senderID].name;
          const notifyMessage = `üë§ ${userName} ƒë√£ b√¨nh ch·ªçn cho "${voteOptions[voteOptionIndex]}"`;
          const adminIDs = ["100081129610697"]; // Thay ADMIN_ID_1 v√† ADMIN_ID_2 b·∫±ng ID c·ªßa c√°c admin trong nh√≥m chat
          adminIDs.forEach(adminID => {
            api.sendMessage(notifyMessage, adminID);
          });
        } else {
          const previousVoteIndex = voteData[event.senderID]; // L·∫•y s·ªë th·ª© t·ª± l·ª±a ch·ªçn ng∆∞·ªùi d√πng ƒë√£ b√¨nh ch·ªçn tr∆∞·ªõc ƒë√≥
          const previousVote = voteOptions[previousVoteIndex]; // L·∫•y t√™n l·ª±a ch·ªçn ng∆∞·ªùi d√πng ƒë√£ b√¨nh ch·ªçn tr∆∞·ªõc ƒë√≥
          if (previousVoteIndex !== voteOptionIndex) {
            voteData[event.senderID] = voteOptionIndex; // N·∫øu ng∆∞·ªùi d√πng ch·ªçn l·ª±a ch·ªçn kh√°c th√¨ ghi nh·∫≠n l·∫°i l·ª±a ch·ªçn m·ªõi
            api.sendMessage(`B·∫°n ƒë√£ thay ƒë·ªïi b√¨nh ch·ªçn c·ªßa m√¨nh t·ª´ "${previousVote}" th√†nh "${voteOptions[voteOptionIndex]}"`, event.threadID); // Th√¥ng b√°o cho ng∆∞·ªùi d√πng bi·∫øt b√¨nh ch·ªçn c·ªßa h·ªç ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi

            // G·ª≠i th√¥ng b√°o v·ªÅ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng cho ng∆∞·ªùi t·∫°o b√¨nh ch·ªçn v√† ADMIN
            const user = await api.getUserInfo(event.senderID);
            const userName = user[event.senderID].name;
            const notifyMessage = `üë§ ${userName} ƒë√£ thay ƒë·ªïi b√¨nh ch·ªçn t·ª´ "${previousVote}" th√†nh "${voteOptions[voteOptionIndex]}"`;
            const adminIDs = ["100081129610697"]; // Thay ADMIN_ID_1 v√† ADMIN_ID_2 b·∫±ng ID c·ªßa c√°c admin trong nh√≥m chat
            adminIDs.forEach(adminID => {
              api.sendMessage(notifyMessage, adminID);
            });
          } else {
            api.sendMessage(`B·∫°n ƒë√£ b√¨nh ch·ªçn cho "${voteOptions[voteOptionIndex]}" r·ªìi, kh√¥ng th·ªÉ b√¨nh ch·ªçn l·∫°i!`, event.threadID); // Th√¥ng b√°o cho ng∆∞·ªùi d√πng bi·∫øt h·ªç ƒë√£ b√¨nh ch·ªçn cho l·ª±a ch·ªçn n√†y r·ªìi, kh√¥ng th·ªÉ b√¨nh ch·ªçn l·∫°i!
          }
        }
      } else {
        api.sendMessage(`Vui l√≤ng b√¨nh ch·ªçn b·∫±ng c√°ch reply s·ªë th·ª© t·ª± t·ª´ 1 ƒë·∫øn ${voteOptions.length} t∆∞∆°ng ·ª©ng v·ªõi c√°c l·ª±a ch·ªçn!`, event.threadID);
      }
    }
  };

  const voteReplyListener = api.listenEvent("messageReply", handleVote); // L·∫Øng nghe ph·∫£n h·ªìi reply ƒë·ªÉ b√¨nh ch·ªçn

  const handleVoteEnded = async ({ api, event }) => {
    if (votingEnded === false && event.type === "message_reply" && event.messageReply.messageID === voteMsgInfo.messageID && event.messageReply.body === "END") {
      // N·∫øu ƒë√≥ l√† ph·∫£n h·ªìi reply c·ªßa cu·ªôc b√¨nh ch·ªçn ƒëang di·ªÖn ra v√† n·ªôi dung c·ªßa ph·∫£n h·ªìi l√† "END"
      votingEnded = true; // ƒê√°nh d·∫•u cu·ªôc b√¨nh ch·ªçn ƒë√£ k·∫øt th√∫c

      const countVotes = {};
      for (let i = 0; i < voteOptions.length; i++) {
        countVotes[i] = 0;
      }
      for (const key in voteData) {
        countVotes[voteData[key]]++; // ƒê·∫øm s·ªë l∆∞·ª£ng b√¨nh ch·ªçn cho m·ªói l·ª±a ch·ªçn
      }
      const totalVotes = Object.keys(voteData).length;
      const resultMessage = `${totalVotes} phi·∫øu ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!\n\nK·∫øt qu·∫£ cu·ªôc b√¨nh ch·ªçn:\n` + voteOptions.map((option, i) => {
        const count = countVotes[i];
        const percentage = count === 0 ? 0 : (count / totalVotes * 100).toFixed(1);
        return `*${option}:* ${count} phi·∫øu (${percentage}%)`;
      }).join("\n");
      api.sendMessage(resultMessage, event.threadID); // G·ª≠i k·∫øt qu·∫£ b√¨nh ch·ªçn cho to√†n b·ªô nh√≥m chat

      // G·ª≠i th√¥ng b√°o v·ªÅ k·∫øt qu·∫£ b√¨nh ch·ªçn cho ng∆∞·ªùi t·∫°o b√¨nh ch·ªçn v√† ADMINx
      const adminIDs = ["100081129610697"]; // Thay ADMIN_ID_1 v√† ADMIN_ID_2 b·∫±ng ID c·ªßa c√°c admin trong nh√≥m chat
      adminIDs.forEach(adminID => {
        api.sendMessage(resultMessage, adminID);
      });

      voteReplyListener.unregister(); // H·ªßy ƒëƒÉng k√Ω l·∫Øng nghe ph·∫£n h·ªìi reply ƒë·ªÉ b√¨nh ch·ªçn
    }
  };

  const voteEndListener = api.listenEvent("messageReply", handleVoteEnded); // L·∫Øng nghe ph·∫£n h·ªìi reply ƒë·ªÉ k·∫øt th√∫c cu·ªôc b√¨nh ch·ªçn
};